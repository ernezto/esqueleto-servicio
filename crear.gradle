def nombreMicroservicio
def directorioDestino
def plantillas = ['**/*.yml.example', 'deploy.gradle']

if (project.hasProperty('nombre')) {
    nombreMicroservicio = "servicio-$project.nombre"
    directorioDestino = "../$nombreMicroservicio"
}

task copiarArchivos(type: Copy) {
    if (project.hasProperty('nombre') && project.hasProperty('puerto') && project.hasProperty('kpass')) {
        if (new File(directorioDestino).exists()) {
            throw new StopExecutionException("El directorio de destino ($directorioDestino) ya existe")
        }

        from('.') {
            new File('.gitignore').eachLine { exclude it }
            exclude plantillas + ['crear.gradle', 'gitignore', 'git.sh']
        }
        into directorioDestino
    } else {
        throw new StopExecutionException('Uso correcto: ./gradlew -b crear.gradle -Pnombre=<nombre microservicio>' +
                ' -Ppuerto=<puerto inicial> -Pkpass=<contraseña del keystore>')
    }
}

task copiarGitignore(type: Copy) {
    from 'gitignore'
    into directorioDestino
    rename { nombreArchivo -> '.gitignore' }
}

task copiarKeystore(type: Copy) {
    def archivoKeystore = 'sniese.keystore'
    if (new File(archivoKeystore).exists()) {
        from archivoKeystore
        into directorioDestino
    } else {
        throw new StopExecutionException("No se encontró el archivo $archivoKeystore")
    }
}

task copiarConfiguracion(type: Copy) {
    from ('.') {
        include plantillas
        expand(nombreMicroservicio: nombreMicroservicio, keyStorePassword: project.kpass, httpInicial: project.puerto,
                httpsInicial: calcularHttpsInicial(project.puerto))
    }
    rename { nombreArchivo -> nombreArchivo.replace('.example', '') }
    into directorioDestino
}

task gitInicializar(type: Exec) {
    workingDir '.'
    commandLine './git.sh', directorioDestino
}

task imprimirInfo() {
    doLast {
        def organizacion = 'Senescyt'
        println '\n==============================================================================='
        println "Microservicio creado en $directorioDestino"
        println 'Repositorio de git inicializado'
        println "\nPor favor, crea el repositorio $nombreMicroservicio en GitHub en la cuenta de la organización:"
        println "  https://github.com/organizations/$organizacion/repositories/new"
        println "  https://github.com/$organizacion/$nombreMicroservicio"
    }
}

def calcularHttpsInicial(puertoHttp) {
    puertoHttp = puertoHttp.toInteger()
    final HTTP_SEMILLA = 8080
    final HTTPS_SEMILLA = 8443
    def diferenciaSemillas = HTTPS_SEMILLA - HTTP_SEMILLA
    def decrementoEntreProtocolos = (puertoHttp - HTTP_SEMILLA) / 2
    return puertoHttp + (diferenciaSemillas - decrementoEntreProtocolos)
}

defaultTasks 'copiarArchivos', 'copiarGitignore', 'copiarKeystore', 'copiarConfiguracion', 'gitInicializar',
        'imprimirInfo'
